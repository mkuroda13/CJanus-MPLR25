// Code generated by goyacc -o expr.go -p expr expr.y. DO NOT EDIT.

//line expr.y:2
package main

import __yyfmt__ "fmt"

//line expr.y:2
import (
	"regexp"
	"strconv"
	"strings"
)

//line expr.y:10
type exprSymType struct {
	yys      int
	num      func() int
	constnum int
	ident    string
}

const NUM = 57346
const IDENT = 57347
const PLUS = 57348
const MINUS = 57349
const XOR = 57350
const MULT = 57351
const DIV = 57352
const MOD = 57353
const AND = 57354
const OR = 57355
const BITAND = 57356
const BITOR = 57357
const LEQ = 57358
const GEQ = 57359
const NEQ = 57360
const EQ = 57361
const LES = 57362
const GRT = 57363
const LPR = 57364
const RPR = 57365
const LSB = 57366
const RSB = 57367

var exprToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"NUM",
	"IDENT",
	"PLUS",
	"MINUS",
	"XOR",
	"MULT",
	"DIV",
	"MOD",
	"AND",
	"OR",
	"BITAND",
	"BITOR",
	"LEQ",
	"GEQ",
	"NEQ",
	"EQ",
	"LES",
	"GRT",
	"LPR",
	"RPR",
	"LSB",
	"RSB",
}

var exprStatenames = [...]string{}

const exprEofCode = 1
const exprErrCode = 2
const exprInitialStackSize = 16

//line expr.y:362

// will not written concurrently, so it can be global
var tokens = initTokens()

type exprLex struct {
	input   string
	retfunc func() int
	read    []addr
	r       *runtime
	p       *pc
	exdone  bool
}

type token struct {
	reg     *regexp.Regexp
	process func(match string, yylval *exprSymType) int
}

func initTokens() []token {
	tokens := make([]token, 0, 30)
	//add token stuff
	//special chars
	tokens = append(tokens, token{regexp.MustCompile(`^\+`),
		func(match string, yylval *exprSymType) int {
			return PLUS
		}})
	tokens = append(tokens, token{regexp.MustCompile(`^-`),
		func(match string, yylval *exprSymType) int {
			return MINUS
		}})
	tokens = append(tokens, token{regexp.MustCompile(`^\^`),
		func(match string, yylval *exprSymType) int {
			return XOR
		}})
	tokens = append(tokens, token{regexp.MustCompile(`^\*`),
		func(match string, yylval *exprSymType) int {
			return MULT
		}})
	tokens = append(tokens, token{regexp.MustCompile(`^/`),
		func(match string, yylval *exprSymType) int {
			return DIV
		}})
	tokens = append(tokens, token{regexp.MustCompile(`^%`),
		func(match string, yylval *exprSymType) int {
			return MOD
		}})
	tokens = append(tokens, token{regexp.MustCompile(`^&&`),
		func(match string, yylval *exprSymType) int {
			return AND
		}})
	tokens = append(tokens, token{regexp.MustCompile(`^\|\|`),
		func(match string, yylval *exprSymType) int {
			return OR
		}})
	tokens = append(tokens, token{regexp.MustCompile(`^&`),
		func(match string, yylval *exprSymType) int {
			return BITAND
		}})
	tokens = append(tokens, token{regexp.MustCompile(`^\|`),
		func(match string, yylval *exprSymType) int {
			return BITOR
		}})
	tokens = append(tokens, token{regexp.MustCompile(`^<=`),
		func(match string, yylval *exprSymType) int {
			return LEQ
		}})
	tokens = append(tokens, token{regexp.MustCompile(`^>=`),
		func(match string, yylval *exprSymType) int {
			return GEQ
		}})
	tokens = append(tokens, token{regexp.MustCompile(`^!=`),
		func(match string, yylval *exprSymType) int {
			return NEQ
		}})
	tokens = append(tokens, token{regexp.MustCompile(`^=`),
		func(match string, yylval *exprSymType) int {
			return EQ
		}})
	tokens = append(tokens, token{regexp.MustCompile(`^<`),
		func(match string, yylval *exprSymType) int {
			return LES
		}})
	tokens = append(tokens, token{regexp.MustCompile(`^>`),
		func(match string, yylval *exprSymType) int {
			return GRT
		}})
	tokens = append(tokens, token{regexp.MustCompile(`^\(`),
		func(match string, yylval *exprSymType) int {
			return LPR
		}})
	tokens = append(tokens, token{regexp.MustCompile(`^\)`),
		func(match string, yylval *exprSymType) int {
			return RPR
		}})
	tokens = append(tokens, token{regexp.MustCompile(`^\[`),
		func(match string, yylval *exprSymType) int {
			return LSB
		}})
	tokens = append(tokens, token{regexp.MustCompile(`^\]`),
		func(match string, yylval *exprSymType) int {
			return RSB
		}})
	//integer constants
	tokens = append(tokens, token{regexp.MustCompile(`^-?\d+`),
		func(match string, yylval *exprSymType) int {
			n, _ := strconv.Atoi(match)
			yylval.constnum = n
			return NUM
		}})
	//identifier (variable / func / whatever)
	tokens = append(tokens, token{regexp.MustCompile(`^[\w\d\[\]\$\#]+`),
		func(match string, yylval *exprSymType) int {
			yylval.ident = match
			return IDENT
		}})
	return tokens
}
func (x *exprLex) Lex(yylval *exprSymType) int {
	x.input = strings.TrimLeft(x.input, "\r\n\t\f\v ") //remove whitespaces
	if len(x.input) == 0 {
		return 0
	}
	for _, v := range tokens {
		s := v.reg.FindString(x.input)
		if s != "" {
			x.input = strings.TrimPrefix(x.input, s)
			return v.process(s, yylval)
		}
	}
	panic("Token not found")
}

func (x *exprLex) Error(s string) {
	panic("Syntax Error: " + s)
}

func EvalExpr(s string, rt *runtime, pc *pc) (func() int, []addr) {
	lexer := &exprLex{s, nil, make([]addr, 0, 1), rt, pc, false}
	exprParse(lexer)
	return lexer.retfunc, lexer.read
}

//line yacctab:1
var exprExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const exprPrivate = 57344

const exprLast = 64

var exprAct = [...]int8{
	5, 2, 7, 13, 15, 16, 18, 17, 19, 20,
	31, 29, 6, 13, 13, 52, 34, 35, 36, 38,
	39, 40, 14, 49, 11, 12, 1, 10, 45, 46,
	47, 48, 4, 50, 41, 42, 43, 44, 51, 37,
	11, 12, 9, 10, 21, 22, 24, 33, 3, 25,
	26, 27, 8, 23, 28, 11, 12, 0, 9, 0,
	0, 0, 32, 30,
}

var exprPact = [...]int16{
	36, -1000, 1, 10, -12, 38, 40, -1000, -1000, 36,
	51, -1000, -14, 36, 36, 36, 36, 20, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 0,
	-1000, 36, 10, -12, 38, 38, 38, 36, 38, 38,
	38, 40, 40, 40, 40, -1000, -1000, -1000, -1000, -1000,
	-10, 38, -1000,
}

var exprPgo = [...]int8{
	0, 52, 1, 48, 32, 0, 12, 2, 26,
}

var exprR1 = [...]int8{
	0, 8, 2, 2, 3, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 5, 5, 5, 5, 5, 6,
	6, 6, 6, 6, 7, 7, 7, 1, 1, 1,
}

var exprR2 = [...]int8{
	0, 1, 1, 3, 1, 3, 1, 3, 3, 3,
	4, 3, 3, 3, 1, 3, 3, 3, 3, 1,
	3, 3, 3, 3, 1, 3, 2, 1, 1, 4,
}

var exprChk = [...]int16{
	-1000, -8, -2, -3, -4, -5, -6, -7, -1, 22,
	7, 4, 5, 13, 12, 16, 17, 19, 18, 20,
	21, 6, 7, 15, 8, 9, 10, 11, 14, -2,
	-1, 24, -3, -4, -5, -5, -5, 19, -5, -5,
	-5, -6, -6, -6, -6, -7, -7, -7, -7, 23,
	-2, -5, 25,
}

var exprDef = [...]int8{
	0, -2, 1, 2, 4, 6, 14, 19, 24, 0,
	0, 27, 28, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	26, 0, 3, 5, 7, 8, 9, 0, 11, 12,
	13, 15, 16, 17, 18, 20, 21, 22, 23, 25,
	0, 10, 29,
}

var exprTok1 = [...]int8{
	1,
}

var exprTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25,
}

var exprTok3 = [...]int8{
	0,
}

var exprErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	exprDebug        = 0
	exprErrorVerbose = false
)

type exprLexer interface {
	Lex(lval *exprSymType) int
	Error(s string)
}

type exprParser interface {
	Parse(exprLexer) int
	Lookahead() int
}

type exprParserImpl struct {
	lval  exprSymType
	stack [exprInitialStackSize]exprSymType
	char  int
}

func (p *exprParserImpl) Lookahead() int {
	return p.char
}

func exprNewParser() exprParser {
	return &exprParserImpl{}
}

const exprFlag = -1000

func exprTokname(c int) string {
	if c >= 1 && c-1 < len(exprToknames) {
		if exprToknames[c-1] != "" {
			return exprToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func exprStatname(s int) string {
	if s >= 0 && s < len(exprStatenames) {
		if exprStatenames[s] != "" {
			return exprStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func exprErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !exprErrorVerbose {
		return "syntax error"
	}

	for _, e := range exprErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + exprTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(exprPact[state])
	for tok := TOKSTART; tok-1 < len(exprToknames); tok++ {
		if n := base + tok; n >= 0 && n < exprLast && int(exprChk[int(exprAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if exprDef[state] == -2 {
		i := 0
		for exprExca[i] != -1 || int(exprExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; exprExca[i] >= 0; i += 2 {
			tok := int(exprExca[i])
			if tok < TOKSTART || exprExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if exprExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += exprTokname(tok)
	}
	return res
}

func exprlex1(lex exprLexer, lval *exprSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(exprTok1[0])
		goto out
	}
	if char < len(exprTok1) {
		token = int(exprTok1[char])
		goto out
	}
	if char >= exprPrivate {
		if char < exprPrivate+len(exprTok2) {
			token = int(exprTok2[char-exprPrivate])
			goto out
		}
	}
	for i := 0; i < len(exprTok3); i += 2 {
		token = int(exprTok3[i+0])
		if token == char {
			token = int(exprTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(exprTok2[1]) /* unknown char */
	}
	if exprDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", exprTokname(token), uint(char))
	}
	return char, token
}

func exprParse(exprlex exprLexer) int {
	return exprNewParser().Parse(exprlex)
}

func (exprrcvr *exprParserImpl) Parse(exprlex exprLexer) int {
	var exprn int
	var exprVAL exprSymType
	var exprDollar []exprSymType
	_ = exprDollar // silence set and not used
	exprS := exprrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	exprstate := 0
	exprrcvr.char = -1
	exprtoken := -1 // exprrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		exprstate = -1
		exprrcvr.char = -1
		exprtoken = -1
	}()
	exprp := -1
	goto exprstack

ret0:
	return 0

ret1:
	return 1

exprstack:
	/* put a state and value onto the stack */
	if exprDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", exprTokname(exprtoken), exprStatname(exprstate))
	}

	exprp++
	if exprp >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprS[exprp] = exprVAL
	exprS[exprp].yys = exprstate

exprnewstate:
	exprn = int(exprPact[exprstate])
	if exprn <= exprFlag {
		goto exprdefault /* simple state */
	}
	if exprrcvr.char < 0 {
		exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
	}
	exprn += exprtoken
	if exprn < 0 || exprn >= exprLast {
		goto exprdefault
	}
	exprn = int(exprAct[exprn])
	if int(exprChk[exprn]) == exprtoken { /* valid shift */
		exprrcvr.char = -1
		exprtoken = -1
		exprVAL = exprrcvr.lval
		exprstate = exprn
		if Errflag > 0 {
			Errflag--
		}
		goto exprstack
	}

exprdefault:
	/* default state action */
	exprn = int(exprDef[exprstate])
	if exprn == -2 {
		if exprrcvr.char < 0 {
			exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if exprExca[xi+0] == -1 && int(exprExca[xi+1]) == exprstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			exprn = int(exprExca[xi+0])
			if exprn < 0 || exprn == exprtoken {
				break
			}
		}
		exprn = int(exprExca[xi+1])
		if exprn < 0 {
			goto ret0
		}
	}
	if exprn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			exprlex.Error(exprErrorMessage(exprstate, exprtoken))
			Nerrs++
			if exprDebug >= 1 {
				__yyfmt__.Printf("%s", exprStatname(exprstate))
				__yyfmt__.Printf(" saw %s\n", exprTokname(exprtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for exprp >= 0 {
				exprn = int(exprPact[exprS[exprp].yys]) + exprErrCode
				if exprn >= 0 && exprn < exprLast {
					exprstate = int(exprAct[exprn]) /* simulate a shift of "error" */
					if int(exprChk[exprstate]) == exprErrCode {
						goto exprstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if exprDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", exprS[exprp].yys)
				}
				exprp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if exprDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", exprTokname(exprtoken))
			}
			if exprtoken == exprEofCode {
				goto ret1
			}
			exprrcvr.char = -1
			exprtoken = -1
			goto exprnewstate /* try again in the same state */
		}
	}

	/* reduction by production exprn */
	if exprDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", exprn, exprStatname(exprstate))
	}

	exprnt := exprn
	exprpt := exprp
	_ = exprpt // guard against "declared and not used"

	exprp -= int(exprR2[exprn])
	// exprp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if exprp+1 >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprVAL = exprS[exprp+1]

	/* consult goto table to find next state */
	exprn = int(exprR1[exprn])
	exprg := int(exprPgo[exprn])
	exprj := exprg + exprS[exprp].yys + 1

	if exprj >= exprLast {
		exprstate = int(exprAct[exprg])
	} else {
		exprstate = int(exprAct[exprj])
		if int(exprChk[exprstate]) != -exprn {
			exprstate = int(exprAct[exprg])
		}
	}
	// dummy call; replaced with literal code
	switch exprnt {

	case 1:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:23
		{
			if l, ok := exprlex.(*exprLex); ok {
				f := exprDollar[1].num
				l.retfunc = func() int {
					return f()
				}
			} else {
				panic("exprlex is somehow not of type exprLex!?")
			}
		}
	case 2:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:32
		{
			f := exprDollar[1].num
			exprVAL.num = func() int { return f() }
		}
	case 3:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line expr.y:37
		{
			if !EXTEXPR {
				if l, ok := exprlex.(*exprLex); ok {
					if !l.exdone {
						l.exdone = true
					} else {
						panic("multiple expr without extexpr option")
					}
				} else {
					panic("exprlex is somehow not of type exprLex!?")
				}
			}
			f1 := exprDollar[1].num
			f2 := exprDollar[3].num
			exprVAL.num = func() int {
				if f1() != 0 || f2() != 0 {
					return 1
				} else {
					return 0
				}
			}
		}
	case 4:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:56
		{
			f := exprDollar[1].num
			exprVAL.num = func() int { return f() }
		}
	case 5:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line expr.y:61
		{
			if !EXTEXPR {
				if l, ok := exprlex.(*exprLex); ok {
					if !l.exdone {
						l.exdone = true
					} else {
						panic("multiple expr without extexpr option")
					}
				} else {
					panic("exprlex is somehow not of type exprLex!?")
				}
			}
			f1 := exprDollar[1].num
			f2 := exprDollar[3].num
			exprVAL.num = func() int {
				if f1() != 0 && f2() != 0 {
					return 1
				} else {
					return 0
				}
			}
		}
	case 6:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:81
		{
			f := exprDollar[1].num
			exprVAL.num = func() int { return f() }
		}
	case 7:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line expr.y:86
		{
			if !EXTEXPR {
				if l, ok := exprlex.(*exprLex); ok {
					if !l.exdone {
						l.exdone = true
					} else {
						panic("multiple expr without extexpr option")
					}
				} else {
					panic("exprlex is somehow not of type exprLex!?")
				}
			}
			f1 := exprDollar[1].num
			f2 := exprDollar[3].num
			exprVAL.num = func() int {
				if f1() <= f2() {
					return 1
				} else {
					return 0
				}
			}
		}
	case 8:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line expr.y:105
		{
			if !EXTEXPR {
				if l, ok := exprlex.(*exprLex); ok {
					if !l.exdone {
						l.exdone = true
					} else {
						panic("multiple expr without extexpr option")
					}
				} else {
					panic("exprlex is somehow not of type exprLex!?")
				}
			}
			f1 := exprDollar[1].num
			f2 := exprDollar[3].num
			exprVAL.num = func() int {
				if f1() >= f2() {
					return 1
				} else {
					return 0
				}
			}
		}
	case 9:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line expr.y:124
		{
			if !EXTEXPR {
				if l, ok := exprlex.(*exprLex); ok {
					if !l.exdone {
						l.exdone = true
					} else {
						panic("multiple expr without extexpr option")
					}
				} else {
					panic("exprlex is somehow not of type exprLex!?")
				}
			}
			f1 := exprDollar[1].num
			f2 := exprDollar[3].num
			exprVAL.num = func() int {
				if f1() == f2() {
					return 1
				} else {
					return 0
				}
			}
		}
	case 10:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line expr.y:143
		{
			if !EXTEXPR {
				if l, ok := exprlex.(*exprLex); ok {
					if !l.exdone {
						l.exdone = true
					} else {
						panic("multiple expr without extexpr option")
					}
				} else {
					panic("exprlex is somehow not of type exprLex!?")
				}
			}
			f1 := exprDollar[1].num
			f2 := exprDollar[4].num
			exprVAL.num = func() int {
				if f1() == f2() {
					return 1
				} else {
					return 0
				}
			}
		}
	case 11:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line expr.y:162
		{
			if !EXTEXPR {
				if l, ok := exprlex.(*exprLex); ok {
					if !l.exdone {
						l.exdone = true
					} else {
						panic("multiple expr without extexpr option")
					}
				} else {
					panic("exprlex is somehow not of type exprLex!?")
				}
			}
			f1 := exprDollar[1].num
			f2 := exprDollar[3].num
			exprVAL.num = func() int {
				if f1() != f2() {
					return 1
				} else {
					return 0
				}
			}
		}
	case 12:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line expr.y:181
		{
			if !EXTEXPR {
				if l, ok := exprlex.(*exprLex); ok {
					if !l.exdone {
						l.exdone = true
					} else {
						panic("multiple expr without extexpr option")
					}
				} else {
					panic("exprlex is somehow not of type exprLex!?")
				}
			}
			f1 := exprDollar[1].num
			f2 := exprDollar[3].num
			exprVAL.num = func() int {
				if f1() < f2() {
					return 1
				} else {
					return 0
				}
			}
		}
	case 13:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line expr.y:200
		{
			if !EXTEXPR {
				if l, ok := exprlex.(*exprLex); ok {
					if !l.exdone {
						l.exdone = true
					} else {
						panic("multiple expr without extexpr option")
					}
				} else {
					panic("exprlex is somehow not of type exprLex!?")
				}
			}
			f1 := exprDollar[1].num
			f2 := exprDollar[3].num
			exprVAL.num = func() int {
				if f1() > f2() {
					return 1
				} else {
					return 0
				}
			}
		}
	case 14:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:219
		{
			f := exprDollar[1].num
			exprVAL.num = func() int { return f() }
		}
	case 15:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line expr.y:224
		{
			if !EXTEXPR {
				if l, ok := exprlex.(*exprLex); ok {
					if !l.exdone {
						l.exdone = true
					} else {
						panic("multiple expr without extexpr option")
					}
				} else {
					panic("exprlex is somehow not of type exprLex!?")
				}
			}
			f1 := exprDollar[1].num
			f2 := exprDollar[3].num
			exprVAL.num = func() int { return f1() + f2() }
		}
	case 16:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line expr.y:237
		{
			if !EXTEXPR {
				if l, ok := exprlex.(*exprLex); ok {
					if !l.exdone {
						l.exdone = true
					} else {
						panic("multiple expr without extexpr option")
					}
				} else {
					panic("exprlex is somehow not of type exprLex!?")
				}
			}
			f1 := exprDollar[1].num
			f2 := exprDollar[3].num
			exprVAL.num = func() int { return f1() - f2() }
		}
	case 18:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line expr.y:251
		{
			if !EXTEXPR {
				if l, ok := exprlex.(*exprLex); ok {
					if !l.exdone {
						l.exdone = true
					} else {
						panic("multiple expr without extexpr option")
					}
				} else {
					panic("exprlex is somehow not of type exprLex!?")
				}
			}
			f1 := exprDollar[1].num
			f2 := exprDollar[3].num
			exprVAL.num = func() int { return f1() ^ f2() }
		}
	case 19:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:264
		{
			f := exprDollar[1].num
			exprVAL.num = func() int { return f() }
		}
	case 20:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line expr.y:269
		{
			if !EXTEXPR {
				if l, ok := exprlex.(*exprLex); ok {
					if !l.exdone {
						l.exdone = true
					} else {
						panic("multiple expr without extexpr option")
					}
				} else {
					panic("exprlex is somehow not of type exprLex!?")
				}
			}
			f1 := exprDollar[1].num
			f2 := exprDollar[3].num
			exprVAL.num = func() int { return f1() * f2() }
		}
	case 21:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line expr.y:282
		{
			if !EXTEXPR {
				if l, ok := exprlex.(*exprLex); ok {
					if !l.exdone {
						l.exdone = true
					} else {
						panic("multiple expr without extexpr option")
					}
				} else {
					panic("exprlex is somehow not of type exprLex!?")
				}
			}
			f1 := exprDollar[1].num
			f2 := exprDollar[3].num
			exprVAL.num = func() int { return f1() / f2() }
		}
	case 22:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line expr.y:295
		{
			if !EXTEXPR {
				if l, ok := exprlex.(*exprLex); ok {
					if !l.exdone {
						l.exdone = true
					} else {
						panic("multiple expr without extexpr option")
					}
				} else {
					panic("exprlex is somehow not of type exprLex!?")
				}
			}
			f1 := exprDollar[1].num
			f2 := exprDollar[3].num
			exprVAL.num = func() int { return f1() % f2() }
		}
	case 24:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:310
		{
			f := exprDollar[1].num
			exprVAL.num = func() int { return f() }
		}
	case 25:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line expr.y:315
		{
			f := exprDollar[2].num
			exprVAL.num = func() int { return f() }
		}
	case 26:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line expr.y:320
		{
			if !EXTEXPR {
				if l, ok := exprlex.(*exprLex); ok {
					if !l.exdone {
						l.exdone = true
					} else {
						panic("multiple expr without extexpr option")
					}
				} else {
					panic("exprlex is somehow not of type exprLex!?")
				}
			}
			exprVAL.num = func() int { return -1 * exprDollar[2].num() }
		}
	case 27:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:332
		{
			f := exprDollar[1].constnum
			exprVAL.num = func() int { return f }
		}
	case 28:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:337
		{
			if l, ok := exprlex.(*exprLex); ok {
				adr := l.r.GetAddr(exprDollar[1].ident, l.p)
				l.read = append(l.read, adr)
				exprVAL.num = func() int {
					//l.r.LockAddr(l.p, adr)
					v := l.r.ReadAddr(adr, l.p)
					//l.r.UnlockAddr(l.p, adr)
					return v
				}
			} else {
				panic("exprlex is somehow not of type exprLex!?")
			}
		}
	case 29:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line expr.y:350
		{
			if l, ok := exprlex.(*exprLex); ok {
				adr := l.r.GetAddr(exprDollar[1].ident+"["+strconv.Itoa(exprDollar[3].num())+"]", l.p)
				l.read = append(l.read, adr)
				exprVAL.num = func() int {
					//l.r.LockAddr(l.p, adr)
					v := l.r.ReadAddr(adr, l.p)
					//l.r.UnlockAddr(l.p, adr)
					return v
				}
			} else {
				panic("exprlex is somehow not of type exprLex!?")
			}
		}
	}
	goto exprstack /* stack new state and value */
}
